{"version":3,"sources":["EmojiCharacterCard.js","Wrapper.js","Navbar.js","Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["EmojiCharacterCard","props","className","ClickEd","onClick","handleClick","id","alt","type","src","image","sign","Wrapper","children","Navbar","currentScore","highscore","Jumbotron","childern","App","state","handemojichar","shuffleArray","handleScore","console","log","timesClickEd","forEach","element","clicked","setState","handleIncrement","shuffledArr","shuffle","array","tempVal","randomIndex","currentIndex","length","Math","floor","random","this","map","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.596c9587.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction EmojiCharacterCard(props) {\r\n    return (\r\n        <div className={\"card \" + (props.ClickEd ? \"animate\" : \"\")} onClick={() => props.handleClick( props.id)}>  \r\n            <div className=\"img-container\">\r\n                <img alt={props.type} src={props.image} />\r\n            </div>\r\n\r\n            <div className=\"img-content\">\r\n                <ul>\r\n                    <li>\r\n                        <strong>type:</strong>{props.type}\r\n                    </li>\r\n\r\n                    <li>\r\n                        <strong>sign: </strong>{props.sign}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmojiCharacterCard;","import React from \"react\";\r\n\r\nfunction Wrapper(props){\r\n    return <div className=\"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <header className=\"container-fluid fixed-top\" >\r\n            <div className=\"row\">\r\n                <center>\r\n                    <h1 className=\"col-sm-8\">Simple Hand Emoji Memory Game</h1>\r\n                </center>\r\n\r\n                <br />\r\n                <br />\r\n                \r\n                <nav className=\"col-sm-4\">\r\n                    <p>Score: <span>{props.currentScore}</span></p>\r\n                    <p>Highest Score: <span>{props.highscore}</span> </p>\r\n                    {props.children}\r\n                </nav>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\n// Jumbotron indicates a big box for calling extra attention to some special content or\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">{props.childern}\r\n                <p className=\"lead\">Only click image once to get highscore. Good luck kawan!</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport EmojiCharacterCard from \"./EmojiCharacterCard\";\nimport handemojichar from \"./handemojichar.json\";\nimport Wrapper from \"./Wrapper\";\nimport Navbar from \"./Navbar\";\nimport Jumbotron from \"./Jumbotron\";\n\nclass App extends Component {\n  state = {\n     handemojichar,\n     ClickEd: false,\n     currentScore: 0,\n     highscore: 0\n  };\n\n  handleClick = id => {\n    this.shuffleArray();\n    this.handleScore(id);\n    console.log(this.state.timesClickEd);\n  };\n\n  handleScore = id => {\n    this.state.handemojichar.forEach(element => {\n      if (id === element.id && element.clicked === false) {\n        element.clicked = true;\n        this.setState({ ClickEd: false });\n        this.handleIncrement();\n      } \n      else if (id === element.id && element.clicked === true) {\n        if (this.state.currentScore > this.state.highscore) {\n          this.setState({ highscore: this.state.currentScore });\n        }\n        this.setState({ currentScore: 0 });\n        this.setState({ ClickEd: true });\n        this.state.handemojichar.forEach(element => (element.clicked = false));\n        console.log(this.state.handemojichar);\n      }\n    } );\n  };\n\n  shuffleArray = () => {\n    // Shuffle array of objects.\n    const shuffledArr = this.shuffle(this.state.handemojichar);\n\n    // Setting 'shuffledArr' as the new state.\n    this.setState({ shuffledArr });\n  };\n\n  // handleIncrement increments this.state.currentScore by 1.\n  handleIncrement = () => {\n\n    // Using setState method to update component's state.\n    this.setState({ currentScore: this.state.currentScore + 1});\n  };\n\n  // Function that takes an array as a parameter and shuffles it.\n  shuffle = array => {\n    var currentIndex = array.length,\n      tempVal,\n      randomIndex;\n\n    // Remain elements to shuffle.\n    while (0 !== currentIndex) {\n      // Pick a remain element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // Swap it with the current element.\n      tempVal = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = tempVal;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <Wrapper>\n\n        <Navbar\n          currentScore={this.state.currentScore}\n          highscore={this.state.highscore}\n        />\n\n        <Jumbotron />\n        {this.state.handemojichar.map(character => (\n          <EmojiCharacterCard\n            ClickEd={this.state.ClickEd}\n            handleClick={this.handleClick}\n            id={character.id}\n            key={character.id}\n            type={character.type}\n            image={character.image}\n            sign={character.sign}\n          />\n        ))}\n        \n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}